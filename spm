#!/bin/bash

################################################################################
### ADDITIONAL FUNCTIONS #######################################################
################################################################################

print_config_row(){
	printf "%-24s= %s\n" "${1}" "${!1}"
}

#-------------------------------------------------------------------------------

print_success(){
	GREEN='\033[1;32m'
	NC='\033[0m' # No Color
	echo -e "${GREEN}"${1}"${NC}"
}

#-------------------------------------------------------------------------------

print_warning(){
	PURPLE='\033[1;35m'
	NC='\033[0m' # No Color
	echo -e "${PURPLE}Warning: "${1}"${NC}"
}

#-------------------------------------------------------------------------------

print_error(){
	RED='\033[1;31m'
	NC='\033[0m' # No Color
	echo -e "${RED}Error: "${1}"${NC}"
}

#-------------------------------------------------------------------------------

confirmation(){
	read -r -p "Are you sure? [y/N] " flag
	flag=${flag:-N} # It means that "N" is default value
	if [ $flag = "y" -o $flag = "Y" ]
	then
		return 0
	fi
	return 1
}

################################################################################
### MAIN FUNCTIONS #############################################################
################################################################################

load_config(){
	# Load default configuration. Lowest privileges
	SPM_KEY_STORAGE="${HOME}"/.spm/storage
	TMP_STORAGE=/tmp
	EDITOR=nano
	EDITOR_EDIT_OPTIONS=-l
	EDITOR_VIEW_OPTIONS='-l -v'
	CLIPBOARD_APP=xclip
	CLIPBOARD_APP_OPTIONS='-selection clipboard'
	ERROR_LOG=/dev/null
	VERSION=1.0rc4

	# Load global configuration
	GLOBAL_CONFIG=/etc/spm.conf
	if [[ -f "${GLOBAL_CONFIG}" ]]; then
		source "${GLOBAL_CONFIG}"
	fi

	# Load user configuration. Highest privileges
	USER_CONFIG=${HOME}/.spm/spm.conf
	if [[ -f "${USER_CONFIG}" ]]; then
		source "${USER_CONFIG}"
	fi
}

#-------------------------------------------------------------------------------

check_tmp_storage_existence(){
	if [[ -d "${TMP_STORAGE}" ]]; then
		return 0
	else
		return 1
	fi
}

#-------------------------------------------------------------------------------

check_spm_key_storage_existence(){
	if [[ -d "${SPM_KEY_STORAGE}" ]]; then
		return 0
	else
		return 1
	fi
}

#-------------------------------------------------------------------------------

check_record_specification(){
	if (( $# > 0 )); then
		return 0
	else
		return 1
	fi
}

#-------------------------------------------------------------------------------

cmd_print_config(){
	print_config_row SPM_KEY_STORAGE
	print_config_row TMP_STORAGE
	print_config_row EDITOR
	print_config_row EDITOR_EDIT_OPTIONS
	print_config_row EDITOR_VIEW_OPTIONS
	print_config_row CLIPBOARD_APP
	print_config_row CLIPBOARD_APP_OPTIONS
	print_config_row ERROR_LOG
	print_config_row VERSION
}

#-------------------------------------------------------------------------------

cmd_help(){
	cat <<-_EOF
	Usage:
	  spm [command]
	Commands:
	  help, --help, -h          print this message
	  init                      initialize spm key storage
	  ls                        show all records
	  new  [record]             create new record
	  view [record]             view specified record
	  move [record]             move or rename specified record
	  edit [record]             edit specified record
	  rm   [record]             remove specified record
	  cpl, copy-login [record]  copy record's login on the clipboard
	  cpp, copy-pass  [record]  copy record's password on the clipboard
	  new-folder    [folder]    create new folder
	  rename-folder [folder]    edit specified folder name
	  rm-folder     [folder]    remove specified folder
	  ct, clear-tmp             forced temporary files removal
	  cc, clear-clipboard       clearing the clipboard
	  config                    print spm aggregated config
	  version                   print spm version
	_EOF
}

#-------------------------------------------------------------------------------

cmd_init(){
	check_spm_key_storage_existence
	status=$?
	if (( $status == 0 )); then
		print_warning "spm key storage already exists in '${SPM_KEY_STORAGE}'"
	else
		mkdir -p "${SPM_KEY_STORAGE}"
		print_success "spm key storage initialized in '${SPM_KEY_STORAGE}'"
	fi

	check_tmp_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_warning "tmp storage '${TMP_STORAGE}' does not exist! You should create it manually!"
	fi
}

#-------------------------------------------------------------------------------

cmd_ls(){
	check_spm_key_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "spm key storage does not exist!"
		exit $status
	fi

	check_tmp_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_warning "tmp storage '${TMP_STORAGE}' does not exist! You should create it manually!"
	fi

	tree -L 2 "${SPM_KEY_STORAGE}"
	# cd $SPM_KEY_STORAGE ; find . | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"; cd - > /dev/null
}

#-------------------------------------------------------------------------------

cmd_new(){
	check_spm_key_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "spm key storage does not exist!"
		exit $status
	fi

	check_tmp_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "tmp storage '${TMP_STORAGE}' does not exist! You should create it manually!"
		exit $status
	fi

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		exit 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${SPM_KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ -f "${RECORD_FILE}" ]]; then
		print_error 'record already exists!'
		exit 1
	fi

	# Random name creation for temp file
	RANDOM_NAME=$(pwgen 20 -1)
	TMP_FILE="${TMP_STORAGE}/${RANDOM_NAME}"

	# Typing record in tmp file with set editor
	eval "${EDITOR} ${EDITOR_EDIT_OPTIONS} ${TMP_FILE} 2>${ERROR_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "${EDITOR} closed unexpectedly. All tempfiles will be removed!"
		cmd_clear_tmp
		exit 1
	fi

	# Symmetric encryption with gpg
	gpg -c --no-symkey-cache -a -o "${TMP_FILE}.gpg" "${TMP_FILE}" 2>"${ERROR_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "encryption canceled unexpectedly. All tempfiles will be removed!"
		cmd_clear_tmp
		exit 1
	fi
	
	# Moving ecnrypted file into spm key storage
	mv "${TMP_FILE}.gpg" "${RECORD_FILE}" 2>"${ERROR_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "moving file canceled unexpectedly. All tempfiles will be removed!"
		cmd_clear_tmp
		exit 1
	fi

	# Clean all temporary files
	cmd_clear_tmp

	print_success "Record '${RECORD_NAME}' successfully added!"
}

#-------------------------------------------------------------------------------

cmd_view(){
	check_spm_key_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "spm key storage does not exist!"
		exit $status
	fi

	check_tmp_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "tmp storage '${TMP_STORAGE}' does not exist! You should create it manually!"
		exit $status
	fi

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		exit 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${SPM_KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		exit 1
	fi

	# Random name creation for temp file
	RANDOM_NAME=$(pwgen 20 -1)
	TMP_FILE="${TMP_STORAGE}/${RANDOM_NAME}"

	# Decryption
	gpg -d --no-symkey-cache -o "${TMP_FILE}" "${RECORD_FILE}" 2>"${ERROR_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "decryption canceled unexpectedly. All tempfiles will be removed!"
		cmd_clear_tmp
		exit 1
	fi

	# Open in editor to view (view mode enabled if available)
	eval "${EDITOR} ${EDITOR_VIEW_OPTIONS} ${TMP_FILE} 2>${ERROR_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "${EDITOR} closed unexpectedly. All tempfiles will be removed!"
		cmd_clear_tmp
		exit 1
	fi

	# Clean all temporary files
	cmd_clear_tmp
}

#-------------------------------------------------------------------------------

cmd_move(){
	check_spm_key_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "spm key storage does not exist!"
		exit $status
	fi

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		exit 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${SPM_KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		exit 1
	fi

	# Enter new location
	read -r -p "Enter new record location: " NEW_RECORD_NAME

	# Record moving
	confirmation
	status=$?
	if (( $status == 0 )); then
		NEW_RECORD_FILE="${SPM_KEY_STORAGE}/${NEW_RECORD_NAME}"
		mv "${RECORD_FILE}" "${NEW_RECORD_FILE}"
		print_success "Record '${RECORD_NAME}' moved to '${NEW_RECORD_NAME}'!"
	else
		print_warning "moving rejected!"
	fi
}

#-------------------------------------------------------------------------------

cmd_rm(){
	check_spm_key_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "spm key storage does not exist!"
		exit $status
	fi

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		exit 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${SPM_KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		exit 1
	fi

	# Record file removing
	confirmation
	status=$?
	if (( $status == 0 )); then
		rm "${RECORD_FILE}"
		print_success "Record ${RECORD_NAME} successfully removed!"
	else
		print_warning "removing rejected!"
	fi
}

#-------------------------------------------------------------------------------

cmd_edit(){
	check_spm_key_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "spm key storage does not exist!"
		exit $status
	fi

	check_tmp_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "tmp storage '${TMP_STORAGE}' does not exist! You should create it manually!"
		exit $status
	fi

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		exit 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${SPM_KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		exit 1
	fi

	# Random name creation for temp file
	RANDOM_NAME=$(pwgen 20 -1)
	TMP_FILE="${TMP_STORAGE}/${RANDOM_NAME}"

	# Decryption
	gpg -d --no-symkey-cache -o "${TMP_FILE}" "${RECORD_FILE}" 2>"${ERROR_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "decryption canceled unexpectedly. All tempfiles will be removed!"
		cmd_clear_tmp
		exit 1
	fi

	# Calculate hash of temp file before editing for further comparing
	hash_before=$(sha256sum "${TMP_FILE}" | awk '{ print $1 }')

	# Open in editor to edit
	eval "${EDITOR} ${EDITOR_EDIT_OPTIONS} ${TMP_FILE} 2>${ERROR_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "${EDITOR} closed unexpectedly. All tempfiles will be removed!"
		cmd_clear_tmp
		exit 1
	fi

	# Calculate hash of temp file after editing for further comparing
	hash_after=$(sha256sum "${TMP_FILE}" | awk '{ print $1 }')

	# Hash comparision
	if [[ $hash_before == $hash_after ]]; then
		print_error "record has not been edited. All tempfiles will be removed!"
		cmd_clear_tmp
		exit 1
	fi

	# Symmetric encryption with gpg
	gpg -c --no-symkey-cache -a -o "${TMP_FILE}.gpg" "${TMP_FILE}" 2>"${ERROR_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "encryption canceled unexpectedly. All tempfiles will be removed!"
		cmd_clear_tmp
		exit 1
	fi
	
	# Moving ecnrypted file into spm key storage
	mv "${TMP_FILE}.gpg" "${RECORD_FILE}" 2>"${ERROR_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "moving file canceled unexpectedly. All tempfiles will be removed!"
		cmd_clear_tmp
		exit 1
	fi

	# Clean all temporary files
	cmd_clear_tmp
}

#-------------------------------------------------------------------------------

cmd_print_version(){
	echo "$VERSION"
}

#-------------------------------------------------------------------------------

cmd_new_folder(){
	check_spm_key_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "spm key storage does not exist!"
		exit $status
	fi

	# Check folder specification
	if (( $# == 0 )); then
		print_error "no folder specified!"
		exit 1
	fi

	# Name creation for folder file
	FOLDER_NAME="${1}"
	FOLDER_PATH="${SPM_KEY_STORAGE}/${FOLDER_NAME}"

	# Check folder existence
	if [[ -d "${FOLDER_PATH}" ]]; then
		print_error "folder '${FOLDER_NAME}' already exists!"
		exit 1
	fi

	mkdir -p "${FOLDER_PATH}"
	print_success "Folder '${FOLDER_NAME}' successfully added!"
}

#-------------------------------------------------------------------------------

cmd_rename_folder(){
	check_spm_key_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "spm key storage does not exist!"
		exit $status
	fi

	# Check folder specification
	if (( $# == 0 )); then
		print_error "no folder specified!"
		exit 1
	fi

	# Name creation for folder
	FOLDER_NAME="${1}"
	FOLDER_PATH="${SPM_KEY_STORAGE}/${FOLDER_NAME}"

	# Check folder existence
	if [[ ! -d "${FOLDER_PATH}" ]]; then
		print_error "specified folder does not exist!"
		exit 1
	fi

	# Enter new name
	read -r -p "Enter new folder name: " NEW_FOLDER_NAME

	# Folder renaming
	confirmation
	status=$?
	if (( $status == 0 )); then
		NEW_FOLDER_PATH="${SPM_KEY_STORAGE}/${NEW_FOLDER_NAME}"
		mv "${FOLDER_PATH}" "${NEW_FOLDER_PATH}"
		print_success "Folder '${FOLDER_NAME}' renamed to '${NEW_FOLDER_NAME}'!"
	else
		print_warning "renaming rejected!"
	fi
}

#-------------------------------------------------------------------------------

cmd_rm_folder(){
	check_spm_key_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "spm key storage does not exist!"
		exit $status
	fi

	# Check folder specification
	if (( $# == 0 )); then
		print_error "no folder specified!"
		exit 1
	fi

	# Name creation for folder
	FOLDER_NAME="${1}"
	FOLDER_PATH="${SPM_KEY_STORAGE}/${FOLDER_NAME}"

	# Check folder existence
	if [[ ! -d "${FOLDER_PATH}" ]]; then
		print_error "specified folder does not exist!"
		exit 1
	fi

	# Folder removing
	confirmation
	status=$?
	if (( $status == 0 )); then
		rm -rf "${FOLDER_PATH}"
		print_success "Folder ${FOLDER_NAME} successfully removed!"
	else
		print_warning "removing rejected!"
	fi
}

#-------------------------------------------------------------------------------

cmd_clear_tmp(){
	check_tmp_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "tmp storage '${TMP_STORAGE}' does not exist! You should create it manually!"
		exit $status
	fi

	rm -f "${TMP_STORAGE}"/*
}

#-------------------------------------------------------------------------------

cmd_clear_clipboard(){
	echo -n "" | eval "${CLIPBOARD_APP} ${CLIPBOARD_APP_OPTIONS}"
}

#-------------------------------------------------------------------------------

cmd_copy_login(){
	check_spm_key_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "spm key storage does not exist!"
		exit $status
	fi

	check_tmp_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "tmp storage '${TMP_STORAGE}' does not exist! You should create it manually!"
		exit $status
	fi

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		exit 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${SPM_KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		exit 1
	fi

	# Random name creation for temp file
	RANDOM_NAME=$(pwgen 20 -1)
	TMP_FILE="${TMP_STORAGE}/${RANDOM_NAME}"

	# Decryption
	gpg -d --no-symkey-cache -o "${TMP_FILE}" "${RECORD_FILE}" 2>"${ERROR_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "decryption canceled unexpectedly. All tempfiles will be removed!"
		cmd_clear_tmp
		exit 1
	fi

	# Moving login (first string) to CLIPBOARD
	head -n 1 "${TMP_FILE}" | tr -d '\n' | eval "${CLIPBOARD_APP} ${CLIPBOARD_APP_OPTIONS}"
	status=$?
	if (( status == 0 )); then
		print_success "Login of ${RECORD_NAME} copied on the CLIPBOARD"
	fi

	# Clean all temporary files
	cmd_clear_tmp

}

#-------------------------------------------------------------------------------

cmd_copy_pass(){
	check_spm_key_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "spm key storage does not exist!"
		exit $status
	fi

	check_tmp_storage_existence
	status=$?
	if (( $status != 0 )); then
		print_error "tmp storage '${TMP_STORAGE}' does not exist! You should create it manually!"
		exit $status
	fi

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		exit 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${SPM_KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		exit 1
	fi

	# Random name creation for temp file
	RANDOM_NAME=$(pwgen 20 -1)
	TMP_FILE="${TMP_STORAGE}/${RANDOM_NAME}"

	# Decryption
	gpg -d --no-symkey-cache -o "${TMP_FILE}" "${RECORD_FILE}" 2>"${ERROR_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "decryption canceled unexpectedly. All tempfiles will be removed!"
		cmd_clear_tmp
		exit 1
	fi

	# Moving password (second string) to CLIPBOARD
	head -n 2 "${TMP_FILE}" | tail -n 1 | tr -d '\n' | eval "${CLIPBOARD_APP} ${CLIPBOARD_APP_OPTIONS}"
	status=$?
	if (( status == 0 )); then
		print_success "Password of ${RECORD_NAME} copied on the CLIPBOARD"
	fi

	# Clean all temporary files
	cmd_clear_tmp

}

################################################################################
### Entry point ################################################################
################################################################################

main(){
	load_config

	case "$1" in
		help|--help|-h) cmd_help ;;
		init) cmd_init ;;
		ls) cmd_ls ;;
		new) shift; cmd_new "$@" ;;
		view) shift; cmd_view "$@" ;;
		move) shift; cmd_move "$@" ;;
		rm) shift; cmd_rm "$@" ;;
		edit) shift; cmd_edit "$@" ;;
		cpl|copy-login) shift; cmd_copy_login "$@" ;;
		cpp|copy-pass) shift; cmd_copy_pass "$@" ;;
		new-folder) shift; cmd_new_folder "$@" ;;
		rename-folder) shift; cmd_rename_folder "$@" ;;
		rm-folder) shift; cmd_rm_folder "$@" ;;
		ct|clear-tmp) cmd_clear_tmp ;;
		cc|clear-clip) cmd_clear_clipboard ;;
		config) cmd_print_config ;;
		version) cmd_print_version ;;
	esac

	exit 0
}

main "$@"

#-------------------------------------------------------------------------------
