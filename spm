#!/bin/bash

################################################################################
### GLOBAL VARIABLES ###########################################################
################################################################################

## Set 'true' to enable debug mode.
## Another value (or empty and undefined) is equal to 'false'.
readonly DEBUG=true
readonly SPM_FOLDER="${HOME}/.spm"
readonly VERSION=1.1rc1

################################################################################
### ADDITIONAL FUNCTIONS #######################################################
################################################################################

print_config_row(){
	printf "%-24s= %s\n" "${1}" "${!1}"
}

#-------------------------------------------------------------------------------

print_success(){
	GREEN='\033[1;32m'
	NC='\033[0m' # No Color
	echo -e "${GREEN}"${1}"${NC}"
}

#-------------------------------------------------------------------------------

print_warning(){
	PURPLE='\033[1;35m'
	NC='\033[0m' # No Color
	echo -e "${PURPLE}Warning: "${1}"${NC}"
}

#-------------------------------------------------------------------------------

print_error(){
	RED='\033[1;31m'
	NC='\033[0m' # No Color
	echo -e "${RED}Error: "${1}"${NC}"
}

#-------------------------------------------------------------------------------

print_debug(){
	CYAN='\033[1;36m'
	NC='\033[0m' # No Color
	if [[ ! -z $DEBUG ]]; then
		if [[ $DEBUG = true ]]; then
			if [[ -z $OUTPUT_LOG ]]; then
				local OUTPUT_LOG=/dev/stdout
			fi
			echo -e "${CYAN}DEBUG: "${1}"${NC}" > "${OUTPUT_LOG}"
		fi
	fi
}

#-------------------------------------------------------------------------------

confirmation(){
	read -r -p "Are you sure? [y/N] " flag
	flag=${flag:-N} # It means that "N" is default value
	if [ $flag = "y" -o $flag = "Y" ]
	then
		return 0
	fi
	return 1
}

#-------------------------------------------------------------------------------

random_string(){
	echo -n $(pwgen 40 -1)
}

################################################################################
### MAIN FUNCTIONS #############################################################
################################################################################

load_config(){
	print_debug "'${FUNCNAME}' function started..."

	print_debug "Load user configuration. Highest privileges"
	USER_CONFIG=${SPM_FOLDER}/spm.conf
	if [[ -f "${USER_CONFIG}" ]]; then
		source "${USER_CONFIG}"
	fi

	print_debug "Load defaults for undefined configurations. Lowest privileges"
	if [[ -z $SPM_KEY_STORAGE ]]; then SPM_KEY_STORAGE="${SPM_FOLDER}/spm_key_storage"; fi
	if [[ -z $SPM_TMP_STORAGE ]]; then
		if [[ -d /dev/shm ]]; then
			CANDIDATE=/dev/shm
		else
			CANDIDATE=/tmp
		fi
		SPM_TMP_STORAGE="${CANDIDATE}/spm_tmp_storage_$(whoami)"
	fi
	if [[ -z $OUTPUT_LOG ]]; then OUTPUT_LOG=/dev/null; fi

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

general_command_processing(){
	print_debug "'${FUNCNAME}' function started..."

	case "$1" in
		help|--help|-h)      cmd_help ;;
		init)                cmd_init ;;
		cc|clear-clip)       cmd_clear_clipboard ;;
		config)              cmd_print_config ;;
		version)             cmd_print_version ;;
		ls)                  action_command_processing "$@" ;;
		new)                 action_command_processing "$@" ;;
		view)                action_command_processing "$@" ;;
		move)                action_command_processing "$@" ;;
		rm)                  action_command_processing "$@" ;;
		edit)                action_command_processing "$@" ;;
		cpl|copy-login)      action_command_processing "$@" ;;
		cpp|copy-pass)       action_command_processing "$@" ;;
		new-folder)          action_command_processing "$@" ;;
		rename-folder)       action_command_processing "$@" ;;
		rm-folder)           action_command_processing "$@" ;;
	esac

	print_debug "previous function ended with code $?"

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

action_command_processing(){
	print_debug "'${FUNCNAME}' function started..."

	print_debug "check spm key storage '${SPM_KEY_STORAGE}' existence..."
	if [[ ! -d "${SPM_KEY_STORAGE}" ]]; then
		print_error "spm key storage '${SPM_KEY_STORAGE}' does not exist!"
		return 1
	fi

	init_tmp_storage
	print_debug "previous function ended with code $?"

	case "$1" in
		ls) cmd_ls ;;
		new) shift; cmd_new "$@" ;;
		view) shift; cmd_view "$@" ;;
		move) shift; cmd_move "$@" ;;
		rm) shift; cmd_rm "$@" ;;
		edit) shift; cmd_edit "$@" ;;
		cpl|copy-login) shift; cmd_copy_login "$@" ;;
		cpp|copy-pass) shift; cmd_copy_pass "$@" ;;
		new-folder) shift; cmd_new_folder "$@" ;;
		rename-folder) shift; cmd_rename_folder "$@" ;;
		rm-folder) shift; cmd_rm_folder "$@" ;;
	esac
	print_debug "previous function ended with code $?"

	destroy_tmp_storage
	print_debug "previous function ended with code $?"

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

init_tmp_storage(){
	print_debug "'${FUNCNAME}' function started..."

	mkdir -p "${SPM_TMP_STORAGE}"
	chmod -R 700 "${SPM_TMP_STORAGE}"

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

destroy_tmp_storage(){
	print_debug "'${FUNCNAME}' function started..."

	rm -rf "${SPM_TMP_STORAGE}"

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

cmd_print_config(){
	print_debug "'${FUNCNAME}' function started..."

	print_config_row SPM_KEY_STORAGE
	print_config_row SPM_TMP_STORAGE
	print_config_row OUTPUT_LOG

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

cmd_help(){
	print_debug "'${FUNCNAME}' function started..."

	cat <<-_EOF
	Usage:
	  spm [command]
	Commands:
	  help, --help, -h          print this message
	  init                      initialize spm key storage
	  ls                        show all records
	  new  [record]             create new record
	  view [record]             view specified record
	  move [record]             move or rename specified record
	  edit [record]             edit specified record
	  rm   [record]             remove specified record
	  cpl, copy-login [record]  copy record's login on the clipboard
	  cpp, copy-pass  [record]  copy record's password on the clipboard
	  new-folder    [folder]    create new folder
	  rename-folder [folder]    edit specified folder name
	  rm-folder     [folder]    remove specified folder
	  cc, clear-clipboard       clearing the clipboard
	  config                    print spm aggregated config
	  version                   print spm version
	_EOF

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

cmd_init(){
	print_debug "'${FUNCNAME}' function started..."

	if [[ -d "${SPM_KEY_STORAGE}" ]]; then
		print_warning "spm key storage already exists in '${SPM_KEY_STORAGE}'"
	else
		mkdir -p "${SPM_KEY_STORAGE}"
		chmod -R 700 "${SPM_KEY_STORAGE}"
		print_success "access-protected spm key storage initialized in '${SPM_KEY_STORAGE}'"
	fi

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

cmd_ls(){
	print_debug "'${FUNCNAME}' function started..."

	tree -L 2 "${SPM_KEY_STORAGE}"
	# cd $SPM_KEY_STORAGE ; find . | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"; cd - > /dev/null

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

cmd_new(){
	print_debug "'${FUNCNAME}' function started..."

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		return 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${SPM_KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ -f "${RECORD_FILE}" ]]; then
		print_error 'record already exists!'
		return 1
	fi

	# Random name creation for temp file
	RANDOM_NAME=$(random_string)
	TMP_FILE="${SPM_TMP_STORAGE}/${RANDOM_NAME}"

	# Typing record in tmp file with set editor
	nano -l ${TMP_FILE} 2>${OUTPUT_LOG}
	status=$?
	if (( status != 0 )); then
		print_error "nano closed unexpectedly. All tempfiles will be removed!"
		return 1
	fi

	# Symmetric encryption with gpg
	gpg -c --no-symkey-cache -a -o "${TMP_FILE}.gpg" "${TMP_FILE}" 2>"${OUTPUT_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "encryption canceled unexpectedly. All tempfiles will be removed!"
		return 1
	fi
	
	# Moving ecnrypted file into spm key storage
	mv "${TMP_FILE}.gpg" "${RECORD_FILE}" 2>"${OUTPUT_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "moving file canceled unexpectedly. All tempfiles will be removed!"
		return 1
	fi

	print_success "Record '${RECORD_NAME}' successfully added!"

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

cmd_view(){
	print_debug "'${FUNCNAME}' function started..."

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		return 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${SPM_KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		return 1
	fi

	# Random name creation for temp file
	RANDOM_NAME=$(random_string)
	TMP_FILE="${SPM_TMP_STORAGE}/${RANDOM_NAME}"

	# Decryption
	gpg -d --no-symkey-cache -o "${TMP_FILE}" "${RECORD_FILE}" 2>"${OUTPUT_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "decryption canceled unexpectedly. All tempfiles will be removed!"
		return 1
	fi

	# Open in editor to view (view mode enabled if available)
	nano -l -v ${TMP_FILE} 2>${OUTPUT_LOG}
	status=$?
	if (( status != 0 )); then
		print_error "nano closed unexpectedly. All tempfiles will be removed!"
		return 1
	fi

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

cmd_move(){
	print_debug "'${FUNCNAME}' function started..."

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		return 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${SPM_KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		return 1
	fi

	# Enter new location
	read -r -p "Enter new record location: " NEW_RECORD_NAME

	# Record moving
	confirmation
	status=$?
	if (( $status == 0 )); then
		NEW_RECORD_FILE="${SPM_KEY_STORAGE}/${NEW_RECORD_NAME}"
		mv "${RECORD_FILE}" "${NEW_RECORD_FILE}"
		print_success "Record '${RECORD_NAME}' moved to '${NEW_RECORD_NAME}'!"
	else
		print_warning "moving rejected!"
	fi

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

cmd_rm(){
	print_debug "'${FUNCNAME}' function started..."

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		return 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${SPM_KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		return 1
	fi

	# Record file removing
	confirmation
	status=$?
	if (( $status == 0 )); then
		rm "${RECORD_FILE}"
		print_success "Record ${RECORD_NAME} successfully removed!"
	else
		print_warning "removing rejected!"
	fi

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

cmd_edit(){
	print_debug "'${FUNCNAME}' function started..."

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		return 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${SPM_KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		return 1
	fi

	# Random name creation for temp file
	RANDOM_NAME=$(random_string)
	TMP_FILE="${SPM_TMP_STORAGE}/${RANDOM_NAME}"

	# Decryption
	gpg -d --no-symkey-cache -o "${TMP_FILE}" "${RECORD_FILE}" 2>"${OUTPUT_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "decryption canceled unexpectedly. All tempfiles will be removed!"
		return 1
	fi

	# Calculate hash of temp file before editing for further comparing
	hash_before=$(sha256sum "${TMP_FILE}" | awk '{ print $1 }')

	# Open in editor to edit
	nano -l ${TMP_FILE} 2>${OUTPUT_LOG}
	status=$?
	if (( status != 0 )); then
		print_error "nano closed unexpectedly. All tempfiles will be removed!"
		return 1
	fi

	# Calculate hash of temp file after editing for further comparing
	hash_after=$(sha256sum "${TMP_FILE}" | awk '{ print $1 }')

	# Hash comparision
	if [[ $hash_before == $hash_after ]]; then
		print_error "record has not been edited. All tempfiles will be removed!"
		return 1
	fi

	# Symmetric encryption with gpg
	gpg -c --no-symkey-cache -a -o "${TMP_FILE}.gpg" "${TMP_FILE}" 2>"${OUTPUT_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "encryption canceled unexpectedly. All tempfiles will be removed!"
		return 1
	fi
	
	# Moving ecnrypted file into spm key storage
	mv "${TMP_FILE}.gpg" "${RECORD_FILE}" 2>"${OUTPUT_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "moving file canceled unexpectedly. All tempfiles will be removed!"
		return 1
	fi

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

cmd_print_version(){
	print_debug "'${FUNCNAME}' function started..."

	echo "$VERSION"

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

cmd_new_folder(){
	print_debug "'${FUNCNAME}' function started..."

	# Check folder specification
	if (( $# == 0 )); then
		print_error "no folder specified!"
		return 1
	fi

	# Name creation for folder file
	FOLDER_NAME="${1}"
	FOLDER_PATH="${SPM_KEY_STORAGE}/${FOLDER_NAME}"

	# Check folder existence
	if [[ -d "${FOLDER_PATH}" ]]; then
		print_error "folder '${FOLDER_NAME}' already exists!"
		return 1
	fi

	mkdir -p "${FOLDER_PATH}"
	print_success "Folder '${FOLDER_NAME}' successfully added!"

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

cmd_rename_folder(){
	print_debug "'${FUNCNAME}' function started..."

	# Check folder specification
	if (( $# == 0 )); then
		print_error "no folder specified!"
		return 1
	fi

	# Name creation for folder
	FOLDER_NAME="${1}"
	FOLDER_PATH="${SPM_KEY_STORAGE}/${FOLDER_NAME}"

	# Check folder existence
	if [[ ! -d "${FOLDER_PATH}" ]]; then
		print_error "specified folder does not exist!"
		return 1
	fi

	# Enter new name
	read -r -p "Enter new folder name: " NEW_FOLDER_NAME

	# Folder renaming
	confirmation
	status=$?
	if (( $status == 0 )); then
		NEW_FOLDER_PATH="${SPM_KEY_STORAGE}/${NEW_FOLDER_NAME}"
		mv "${FOLDER_PATH}" "${NEW_FOLDER_PATH}"
		print_success "Folder '${FOLDER_NAME}' renamed to '${NEW_FOLDER_NAME}'!"
	else
		print_warning "renaming rejected!"
	fi

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

cmd_rm_folder(){
	print_debug "'${FUNCNAME}' function started..."

	# Check folder specification
	if (( $# == 0 )); then
		print_error "no folder specified!"
		return 1
	fi

	# Name creation for folder
	FOLDER_NAME="${1}"
	FOLDER_PATH="${SPM_KEY_STORAGE}/${FOLDER_NAME}"

	# Check folder existence
	if [[ ! -d "${FOLDER_PATH}" ]]; then
		print_error "specified folder does not exist!"
		return 1
	fi

	# Folder removing
	confirmation
	status=$?
	if (( $status == 0 )); then
		rm -rf "${FOLDER_PATH}"
		print_success "Folder ${FOLDER_NAME} successfully removed!"
	else
		print_warning "removing rejected!"
	fi

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

cmd_clear_clipboard(){
	print_debug "'${FUNCNAME}' function started..."

	echo -n "" | xclip -selection clipboard

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

cmd_copy_login(){
	print_debug "'${FUNCNAME}' function started..."

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		return 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${SPM_KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		return 1
	fi

	# Random name creation for temp file
	RANDOM_NAME=$(random_string)
	TMP_FILE="${SPM_TMP_STORAGE}/${RANDOM_NAME}"

	# Decryption
	gpg -d --no-symkey-cache -o "${TMP_FILE}" "${RECORD_FILE}" 2>"${OUTPUT_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "decryption canceled unexpectedly. All tempfiles will be removed!"
		return 1
	fi

	# Moving login (first string) to CLIPBOARD
	head -n 1 "${TMP_FILE}" | tr -d '\n' | xclip -selection clipboard
	status=$?
	if (( status == 0 )); then
		print_success "Login of ${RECORD_NAME} copied on the CLIPBOARD"
	else
		print_error "something go wrong!"
		return 1
	fi

	print_debug "'${FUNCNAME}' function ends!"
}

#-------------------------------------------------------------------------------

cmd_copy_pass(){
	print_debug "'${FUNCNAME}' function started..."

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		return 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${SPM_KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		return 1
	fi

	# Random name creation for temp file
	RANDOM_NAME=$(random_string)
	TMP_FILE="${SPM_TMP_STORAGE}/${RANDOM_NAME}"

	# Decryption
	gpg -d --no-symkey-cache -o "${TMP_FILE}" "${RECORD_FILE}" 2>"${OUTPUT_LOG}"
	status=$?
	if (( status != 0 )); then
		print_error "decryption canceled unexpectedly. All tempfiles will be removed!"
		return 1
	fi

	# Moving password (second string) to CLIPBOARD
	head -n 2 "${TMP_FILE}" | tail -n 1 | tr -d '\n' | xclip -selection clipboard
	status=$?
	if (( status == 0 )); then
		print_success "Password of ${RECORD_NAME} copied on the CLIPBOARD"
	else
		print_error "something go wrong!"
		return 1
	fi

	print_debug "'${FUNCNAME}' function ends!"
}

################################################################################
### Entry point ################################################################
################################################################################

main(){
	print_debug "-----------------------------------------"
	print_debug "'${FUNCNAME}' function started..."

	load_config
	print_debug "previous function ended with code $?"

	general_command_processing "$@"
	print_debug "previous function ended with code $?"

	print_debug "'${FUNCNAME}' function ends!"
}

main "$@"

#-------------------------------------------------------------------------------
