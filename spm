#!/bin/bash

################################################################################
### LICENSE ####################################################################
################################################################################

# MIT License
#
# Copyright (c) 2020, 2021, 2022, 2023 ilsuryusipov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

################################################################################
### DEBUG MODE SETTINGS ########################################################
################################################################################

## Set 'true' to enable debug mode.
## Another value (or empty and undefined) is equal to 'false'.
readonly DEBUG=true
if [[ ! -z $DEBUG ]] && [[ $DEBUG = true ]]; then
	readonly DEBUG_STREAM=/dev/stdout
	echo -e "\033[1;31mDEBUG mode ON!\033[0m"
else
	readonly DEBUG_STREAM=/dev/null
fi

################################################################################
### ADDITIONAL FUNCTIONS #######################################################
################################################################################

print_config_row(){
	printf "%-24s= %s\n" "${1}" "${!1}"
}

#-------------------------------------------------------------------------------

print_success(){
	GREEN='\033[1;32m'
	NC='\033[0m' # No Color
	echo -e "${GREEN}"${1}"${NC}"
}

#-------------------------------------------------------------------------------

print_warning(){
	PURPLE='\033[1;35m'
	NC='\033[0m' # No Color
	echo -e "${PURPLE}Warning: "${1}"${NC}"
}

#-------------------------------------------------------------------------------

print_error(){
	RED='\033[1;31m'
	NC='\033[0m' # No Color
	echo -e "${RED}Error: "${1}"${NC}"
}

#-------------------------------------------------------------------------------

print_debug(){
	CYAN='\033[1;36m'
	NC='\033[0m' # No Color
	if [[ ! -z $DEBUG ]] && [[ $DEBUG = true ]]; then
		echo -e "${CYAN}DEBUG: "${1}"${NC}" > "${DEBUG_STREAM}"
	fi
}

#-------------------------------------------------------------------------------

confirmation(){
	read -r -p "Are you sure? [y/N] " flag
	flag=${flag:-N} # It means that "N" is default value
	if [ $flag = "y" -o $flag = "Y" ]; then
		return 0
	fi
	return 1
}

#-------------------------------------------------------------------------------

random_string(){
	echo -n $(echo $RANDOM | md5sum | head -c 32)
}

################################################################################
### GLOBAL VARIABLES AND CONFIGURATIONS ########################################
################################################################################

readonly USER_CONFIG="~/.config/spm.conf"
readonly VERSION=3.0.0

#-------------------------------------------------------------------------------

# Load user configuration. Highest privileges
if [[ -f "${USER_CONFIG}" ]]; then
	source "${USER_CONFIG}"
fi

# Load defaults for undefined configurations. Lowest privileges
if [[ -z $KEY_STORAGE ]]; then KEY_STORAGE="~/.cache/spm"; fi
if [[ -z $TMP_STORAGE_ROOT ]]; then
	if [[ -d /dev/shm ]]; then
		TMP_STORAGE_ROOT=/dev/shm
	else
		TMP_STORAGE_ROOT=/tmp
	fi
fi
TMP_STORAGE="${TMP_STORAGE_ROOT}/$(random_string)"

################################################################################
### MAIN FUNCTIONS #############################################################
################################################################################

cmd_help(){
	print_debug "'${FUNCNAME}' function started..."

	cat <<-_EOF
	Usage:
	  spm [command]
	Commands:
	  help, --help, -h          print this message
	  create user-config        create file for user's configuration
	  create key-storage        create key storage in specified location
	  ls                        show all records in key storage
	  new  [record]             create new record
	  view [record]             view specified record
	  preview [record]          preview specified record (without decoding)
	  move [record]             move or rename specified record
	  edit [record]             edit specified record
	  rm   [record]             remove specified record
	  cpl, copy-login [record]  copy record's login on the clipboard
	  cpp, copy-pass  [record]  copy record's password on the clipboard
	  new-folder    [folder]    create new folder
	  rename-folder [folder]    edit specified folder name
	  rm-folder     [folder]    remove specified folder
	  config                    print spm aggregated config
	  version                   print spm version
	_EOF

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_print_config(){
	print_debug "'${FUNCNAME}' function started..."

	print_config_row USER_CONFIG
	print_config_row KEY_STORAGE
	print_config_row TMP_STORAGE_ROOT
	print_config_row TMP_STORAGE
	print_config_row DEBUG_STREAM
	print_config_row VERSION

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

general_command_processing(){
	print_debug "'${FUNCNAME}' function started..."

	case "$1" in
		help|--help|-h)      cmd_help ;;
		config)              cmd_print_config ;;
		version)             cmd_print_version ;;
		create)              shift; create_command_processing "$@" ;;
		ls)                  action_command_processing "$@" ;;
		new)                 action_command_processing "$@" ;;
		view)                action_command_processing "$@" ;;
		preview)             action_command_processing "$@" ;;
		move)                action_command_processing "$@" ;;
		rm)                  action_command_processing "$@" ;;
		edit)                action_command_processing "$@" ;;
		cpl|copy-login)      action_command_processing "$@" ;;
		cpp|copy-pass)       action_command_processing "$@" ;;
		new-folder)          action_command_processing "$@" ;;
		rename-folder)       action_command_processing "$@" ;;
		rm-folder)           action_command_processing "$@" ;;
		*)                   cmd_invalid_parameter_handler "$@" ;;
	esac

	status=$?
	if (( $status != 0 )); then
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

create_command_processing(){
	print_debug "'${FUNCNAME}' function started..."

	case "$1" in
		user-config)      shift; cmd_create_user_config "$@" ;;
		key-storage)      shift; cmd_create_key_storage "$@" ;;
		*)                cmd_invalid_parameter_handler "$@" ;;
	esac

	status=$?
	if (( $status != 0 )); then
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

action_command_processing(){
	print_debug "'${FUNCNAME}' function started..."

	print_debug "check spm key storage '${KEY_STORAGE}' existence..."
	if [[ ! -d "${KEY_STORAGE}" ]]; then
		print_error "spm key storage '${KEY_STORAGE}' does not exist!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	init_tmp_storage

	case "$1" in
		ls)                cmd_ls ;;
		new)               shift; cmd_new "$@" ;;
		view)              shift; cmd_view "$@" ;;
		preview)           shift; cmd_preview "$@" ;;
		move)              shift; cmd_move "$@" ;;
		rm)                shift; cmd_rm "$@" ;;
		edit)              shift; cmd_edit "$@" ;;
		cpl|copy-login)    shift; cmd_copy_login "$@" ;;
		cpp|copy-pass)     shift; cmd_copy_pass "$@" ;;
		new-folder)        shift; cmd_new_folder "$@" ;;
		rename-folder)     shift; cmd_rename_folder "$@" ;;
		rm-folder)         shift; cmd_rm_folder "$@" ;;
	esac

	status=$?
	if (( $status != 0 )); then
		destroy_tmp_storage
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	destroy_tmp_storage

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_create_user_config(){
	# @TODO commands for: remove, reset config
	print_debug "'${FUNCNAME}' function started..."

	if [[ -f "${USER_CONFIG}" ]]; then
		print_warning "'${USER_CONFIG}' already exists!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	touch "${USER_CONFIG}" && chmod 600 "${USER_CONFIG}"
	status=$?
	if (( $status != 0 )); then
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	cat>"${USER_CONFIG}" <<-_EOF
	## Spm key storage path. It should be folder with umask 700
	## only for current user.
	## Default: $HOME/SPMKeyStorage
	# KEY_STORAGE=

	## Folder for temporary files and folders generating.
	## Highly recommended to use the 'tmpfs' folder.
	## Default: /dev/shm (if exists) or /tmp
	# TMP_STORAGE_ROOT=
	_EOF
	status=$?
	if (( $status != 0 )); then
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_success "'${USER_CONFIG}' created"

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_create_key_storage(){
	# @TODO commands for: remove
	print_debug "'${FUNCNAME}' function started..."

	if [[ -d "${KEY_STORAGE}" ]]; then
		print_warning "spm key storage already exists in '${KEY_STORAGE}'"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	mkdir -m=700 -p "${KEY_STORAGE}"
	status=$?
	if (( $status != 0 )); then
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_success "access-protected spm key storage initialized in '${KEY_STORAGE}'"

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_invalid_parameter_handler(){
	print_debug "'${FUNCNAME}' function started..."

	print_error "'${1}' is invalid parameter!"

	print_debug "'${FUNCNAME}' function is error generator, so it ends with code 1! "
	return 1
}

#-------------------------------------------------------------------------------

init_tmp_storage(){
	print_debug "'${FUNCNAME}' function started..."

	mkdir -m=700 -p "${TMP_STORAGE}"
	status=$?
	if (( $status != 0 )); then
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

destroy_tmp_storage(){
	print_debug "'${FUNCNAME}' function started..."

	rm -rf "${TMP_STORAGE}"
	status=$?
	if (( $status != 0 )); then
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_ls(){
	print_debug "'${FUNCNAME}' function started..."

	tree -L 10 "${KEY_STORAGE}"
	# cd $KEY_STORAGE ; find . | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"; cd - > /dev/null
	status=$?
	if (( $status != 0 )); then
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_new(){
	print_debug "'${FUNCNAME}' function started..."

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ -f "${RECORD_FILE}" ]]; then
		print_error 'record already exists!'
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Random name creation for temp file
	RANDOM_NAME=$(random_string)
	TMP_FILE="${TMP_STORAGE}/${RANDOM_NAME}"

	# Typing record in tmp file with set editor
	nano -l ${TMP_FILE} 2>${DEBUG_STREAM}
	status=$?
	if (( $status != 0 )); then
		print_error "nano closed unexpectedly. All tempfiles will be removed!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Symmetric encryption with gpg
	gpg -c --no-symkey-cache -a -o "${TMP_FILE}.gpg" "${TMP_FILE}" 2>"${DEBUG_STREAM}"
	status=$?
	if (( $status != 0 )); then
		print_error "encryption canceled unexpectedly. All tempfiles will be removed!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi
	
	# Moving ecnrypted file into spm key storage
	mv "${TMP_FILE}.gpg" "${RECORD_FILE}" 2>"${DEBUG_STREAM}"
	status=$?
	if (( $status != 0 )); then
		print_error "moving file canceled unexpectedly. All tempfiles will be removed!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_success "Record '${RECORD_NAME}' successfully added!"

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_view(){
	print_debug "'${FUNCNAME}' function started..."

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Random name creation for temp file
	RANDOM_NAME=$(random_string)
	TMP_FILE="${TMP_STORAGE}/${RANDOM_NAME}"

	# Decryption
	gpg -d --no-symkey-cache -o "${TMP_FILE}" "${RECORD_FILE}" 2>"${DEBUG_STREAM}"
	status=$?
	if (( $status != 0 )); then
		print_error "decryption canceled unexpectedly. All tempfiles will be removed!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Open in editor to view (view mode enabled if available)
	nano -l -v ${TMP_FILE} 2>${DEBUG_STREAM}
	status=$?
	if (( $status != 0 )); then
		print_error "nano closed unexpectedly. All tempfiles will be removed!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_preview(){
	print_debug "'${FUNCNAME}' function started..."

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Open in editor to view (view mode enabled if available)
	nano -l -v ${RECORD_FILE} 2>${DEBUG_STREAM}
	status=$?
	if (( $status != 0 )); then
		print_error "nano closed unexpectedly. All tempfiles will be removed!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_move(){
	print_debug "'${FUNCNAME}' function started..."

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Enter new location
	read -r -p "Enter new record location: " NEW_RECORD_NAME

	# Record moving confirmation
	confirmation
	status=$?
	if (( $status != 0 )); then
		print_warning "moving rejected!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Record moving
	NEW_RECORD_FILE="${KEY_STORAGE}/${NEW_RECORD_NAME}"
	mv "${RECORD_FILE}" "${NEW_RECORD_FILE}"
	status=$?
	if (( $status != 0 )); then
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi
	
	print_success "Record '${RECORD_NAME}' moved to '${NEW_RECORD_NAME}'!"

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_rm(){
	print_debug "'${FUNCNAME}' function started..."

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Record file removing confirmation
	confirmation
	status=$?
	if (( $status != 0 )); then
		print_warning "removing rejected!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Record file removing
	rm "${RECORD_FILE}"
	status=$?
	if (( $status != 0 )); then
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_success "Record ${RECORD_NAME} successfully removed!"

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_edit(){
	print_debug "'${FUNCNAME}' function started..."

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Random name creation for temp file
	RANDOM_NAME=$(random_string)
	TMP_FILE="${TMP_STORAGE}/${RANDOM_NAME}"

	# Decryption
	gpg -d --no-symkey-cache -o "${TMP_FILE}" "${RECORD_FILE}" 2>"${DEBUG_STREAM}"
	status=$?
	if (( $status != 0 )); then
		print_error "decryption canceled unexpectedly. All tempfiles will be removed!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Calculate hash of temp file before editing for further comparing
	hash_before=$(sha256sum "${TMP_FILE}" | awk '{ print $1 }')

	# Open in editor to edit
	nano -l ${TMP_FILE} 2>${DEBUG_STREAM}
	status=$?
	if (( $status != 0 )); then
		print_error "nano closed unexpectedly. All tempfiles will be removed!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Calculate hash of temp file after editing for further comparing
	hash_after=$(sha256sum "${TMP_FILE}" | awk '{ print $1 }')

	# Hash comparision
	if [[ $hash_before == $hash_after ]]; then
		print_error "record has not been edited. All tempfiles will be removed!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Symmetric encryption with gpg
	gpg -c --no-symkey-cache -a -o "${TMP_FILE}.gpg" "${TMP_FILE}" 2>"${DEBUG_STREAM}"
	status=$?
	if (( $status != 0 )); then
		print_error "encryption canceled unexpectedly. All tempfiles will be removed!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi
	
	# Moving ecnrypted file into spm key storage
	mv "${TMP_FILE}.gpg" "${RECORD_FILE}" 2>"${DEBUG_STREAM}"
	status=$?
	if (( $status != 0 )); then
		print_error "moving file canceled unexpectedly. All tempfiles will be removed!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_print_version(){
	print_debug "'${FUNCNAME}' function started..."

	echo "$VERSION"

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_new_folder(){
	print_debug "'${FUNCNAME}' function started..."

	# Check folder specification
	if (( $# == 0 )); then
		print_error "no folder specified!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Name creation for folder file
	FOLDER_NAME="${1}"
	FOLDER_PATH="${KEY_STORAGE}/${FOLDER_NAME}"

	# Check folder existence
	if [[ -d "${FOLDER_PATH}" ]]; then
		print_error "folder '${FOLDER_NAME}' already exists!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Folder creation
	mkdir -p "${FOLDER_PATH}"
	status=$?
	if (( $status != 0 )); then
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_success "Folder '${FOLDER_NAME}' successfully added!"

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_rename_folder(){
	print_debug "'${FUNCNAME}' function started..."

	# Check folder specification
	if (( $# == 0 )); then
		print_error "no folder specified!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Name creation for folder
	FOLDER_NAME="${1}"
	FOLDER_PATH="${KEY_STORAGE}/${FOLDER_NAME}"

	# Check folder existence
	if [[ ! -d "${FOLDER_PATH}" ]]; then
		print_error "specified folder does not exist!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Enter new name
	read -r -p "Enter new folder name: " NEW_FOLDER_NAME

	# Folder renaming confirmation
	confirmation
	status=$?
	if (( $status != 0 )); then
		print_warning "renaming rejected!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Folder renaming
	NEW_FOLDER_PATH="${KEY_STORAGE}/${NEW_FOLDER_NAME}"
	mv "${FOLDER_PATH}" "${NEW_FOLDER_PATH}"
	status=$?
	if (( $status != 0 )); then
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_success "Folder '${FOLDER_NAME}' renamed to '${NEW_FOLDER_NAME}'!"

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_rm_folder(){
	print_debug "'${FUNCNAME}' function started..."

	# Check folder specification
	if (( $# == 0 )); then
		print_error "no folder specified!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Name creation for folder
	FOLDER_NAME="${1}"
	FOLDER_PATH="${KEY_STORAGE}/${FOLDER_NAME}"

	# Check folder existence
	if [[ ! -d "${FOLDER_PATH}" ]]; then
		print_error "specified folder does not exist!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Folder removing confirmation
	confirmation
	status=$?
	if (( $status != 0 )); then
		print_warning "removing rejected!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Folder removing
	rm -rf "${FOLDER_PATH}"
	status=$?
	if (( $status != 0 )); then
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_success "Folder ${FOLDER_NAME} successfully removed!"

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_copy_login(){
	print_debug "'${FUNCNAME}' function started..."

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Random name creation for temp file
	RANDOM_NAME=$(random_string)
	TMP_FILE="${TMP_STORAGE}/${RANDOM_NAME}"

	# Decryption
	gpg -d --no-symkey-cache -o "${TMP_FILE}" "${RECORD_FILE}" 2>"${DEBUG_STREAM}"
	status=$?
	if (( $status != 0 )); then
		print_error "decryption canceled unexpectedly. All tempfiles will be removed!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Moving login (first string) to CLIPBOARD
	head -n 1 "${TMP_FILE}" | tr -d '\n' | xclip -l 2 -selection clipboard
	status=$?
	if (( $status != 0 )); then
		print_error "something went wrong!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_success "Login of ${RECORD_NAME} copied on the CLIPBOARD"

	print_debug "'${FUNCNAME}' function ends with code 0"
}

#-------------------------------------------------------------------------------

cmd_copy_pass(){
	print_debug "'${FUNCNAME}' function started..."

	# Check record specification
	if (( $# == 0 )); then
		print_error "no record specified!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Record filename creation
	RECORD_NAME="${1}"
	RECORD_FILE="${KEY_STORAGE}/${RECORD_NAME}"

	# Check record existence
	if [[ ! -f "${RECORD_FILE}" ]]; then
		print_error "specified record does not exist!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Random name creation for temp file
	RANDOM_NAME=$(random_string)
	TMP_FILE="${TMP_STORAGE}/${RANDOM_NAME}"

	# Decryption
	gpg -d --no-symkey-cache -o "${TMP_FILE}" "${RECORD_FILE}" 2>"${DEBUG_STREAM}"
	status=$?
	if (( $status != 0 )); then
		print_error "decryption canceled unexpectedly. All tempfiles will be removed!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	# Moving password (second string) to CLIPBOARD
	head -n 2 "${TMP_FILE}" | tail -n 1 | tr -d '\n' | xclip -l 2 -selection clipboard
	status=$?
	if (( $status != 0 )); then
		print_error "something went wrong!"
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_success "Password of ${RECORD_NAME} copied on the CLIPBOARD"

	print_debug "'${FUNCNAME}' function ends with code 0"
}

################################################################################
### Entry point ################################################################
################################################################################

main(){
	print_debug "'${FUNCNAME}' function started..."

	general_command_processing "$@"

	status=$?
	if (( $status != 0 )); then
		print_debug "'${FUNCNAME}' function ends with code 1!"
		return 1
	fi

	print_debug "'${FUNCNAME}' function exit with code 0"
}

main "$@"

#-------------------------------------------------------------------------------
